{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/pgdb/master/nextflow_schema.json",
    "title": "nf-core/pgdb pipeline parameters",
    "description": "Proteogenomics database creation workflow using pypgatk framework. ",
    "type": "object",
    "definitions": {
        "ensembl_canonical_proteomes": {
            "title": "ENSEMBL canonical proteomes",
            "type": "object",
            "description": "Add ENSEMBL canonical proteomes",
            "default": "",
            "properties": {
                "add_reference": {
                    "type": "boolean",
                    "default": true,
                    "description": "Add the reference proteome to the file"
                },
                "ensembl_downloader_config": {
                    "type": "string",
                    "description": "Path to configuration file for ENSEMBL download parameters"
                },
                "ensembl_config": {
                    "type": "string",
                    "description": "Path to configuration file for parameters in generating protein databases from ENSMEBL sequences"
                },
                "gencode_url": {
                    "type": "string",
                    "default": "ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19",
                    "description": "URL for downloading GENCODE datafiles"
                },
                "ensembl_name": {
                    "type": "string",
                    "default": "homo_sapiens",
                    "description": "Taxonomic term for the species to download from ENSEMBL"
                }
            }
        },
        "non_canonical_proteome_parameters": {
            "title": "Non canonical proteome parameters",
            "type": "object",
            "description": "Non canonical proteins generation parameters",
            "default": "",
            "properties": {
                "ncrna": {
                    "type": "boolean",
                    "description": "Generate protein database from non-coding RNA"
                },
                "pseudogenes": {
                    "type": "boolean",
                    "description": "Generate protein database from pseudogenes"
                },
                "altorfs": {
                    "type": "boolean",
                    "description": "Generate alternative ORFs from canonical proteins"
                },
                "ensembl": {
                    "type": "boolean",
                    "description": "Download ENSEMBL variants and generate protein database"
                }
            }
        },
        "custom_vcf_based_variant_proteomes": {
            "title": "Custom VCF-based variant proteomes",
            "type": "object",
            "description": "Proteins generated using an input VCF",
            "default": "",
            "properties": {
                "vcf": {
                    "type": "boolean",
                    "description": "Enable translation of a given VCF file"
                },
                "vcf_file": {
                    "type": "string",
                    "description": "VCF file path to be translated. Generate variants proteins by modifying sequences of affected transcripts."
                },
                "af_field": {
                    "type": "string",
                    "description": "Allele frequency identifier string in VCF Info column, if no AF info is given set it to empty."
                }
            }
        },
        "cbioportal_variant_proteomes": {
            "title": "cBioportal variant proteomes",
            "type": "object",
            "description": "cBioportal variant parameters",
            "default": "",
            "properties": {
                "cbioportal": {
                    "type": "boolean",
                    "description": "Download cBioPortal studies and generate protein database"
                },
                "cbioportal_accepted_values": {
                    "type": "string",
                    "default": "all",
                    "description": "Specify a tissue type to limit the cBioPortal mutations to a particular caner type"
                },
                "cbioportal_filter_column": {
                    "type": "string",
                    "default": "CANCER_TYPE",
                    "description": "Specify a column from the clinical sample file to be used for filtering records"
                },
                "cbioportal_study_id": {
                    "type": "string",
                    "description": "Download mutations from a specific study in cbiportal default is all which downloads mutations from all studies"
                },
                "cbioportal_config": {
                    "type": "string",
                    "description": "cBioPortal configuration file"
                }
            }
        },
        "cosmic_variant_proteomes": {
            "title": "COSMIC variant proteomes",
            "type": "object",
            "description": "COSMIC variant proteins parameters",
            "default": "",
            "properties": {
                "cosmic_dababase_version": {
                    "type": "string",
                    "default": "latest",
                    "description": "Cosmic database version required"
                },
                "cosmic": {
                    "type": "boolean",
                    "description": "Download COSMIC mutation files and generate protein database"
                },
                "cosmic_celllines": {
                    "type": "string",
                    "description": "Download COSMIC cell line files and generate protein database"
                },
                "cosmic_user_name": {
                    "type": "string",
                    "description": "Password for COSMIC account"
                },
                "cosmic_password": {
                    "type": "string",
                    "description": "Download mutations from a specific study in cbiportal default is all which downloads mutations from all studies"
                },
                "cosmic_config": {
                    "type": "string",
                    "description": "Path to configuration file for parameters in generating"
                },
                "cosmic_cancer_type": {
                    "type": "string",
                    "default": "all",
                    "description": "Specify a tissue type to limit the COSMIC mutations to a particular caner type"
                },
                "cosmic_cellline_name": {
                    "type": "string",
                    "default": "all",
                    "description": "Specify a sample name to limit the COSMIC cell line mutations to a particular cell line"
                },
                "cosmicgenes": {
                    "type": "string",
                    "description": "Loading local cosmic protein database"
                },
                "cosmicmutations": {
                    "type": "string",
                    "description": "Loading local COSMIC mutation files"
                },
                "cosmiccelllines_genes": {
                    "type": "string",
                    "description": "Loading local cosmic_celllines protein database"
                },
                "cosmiccelllines_mutations": {
                    "type": "string",
                    "description": "Loading local COSMIC cell line files"
                }
            }
        },
        "gnomad_variant_proteomes": {
            "title": "GNOMAD variant proteomes",
            "type": "object",
            "description": "",
            "default": "",
            "properties": {
                "gnomad": {
                    "type": "boolean",
                    "description": "Add gNOMAD variants to the database"
                },
                "gnomad_file_url": {
                    "type": "string",
                    "default": "gs://gnomad-public/release/2.1.1/vcf/exomes/gnomad.exomes.r2.1.1.sites.vcf.bgz",
                    "description": "gNOMAD url"
                }
            }
        },
        "decoy_generation": {
            "title": "Decoy generation",
            "type": "object",
            "description": "Generate decoy proteins and attach them to the final protein database",
            "default": "",
            "properties": {
                "decoy": {
                    "type": "boolean",
                    "description": "Append the decoy proteins to the database"
                },
                "decoy_prefix": {
                    "type": "string",
                    "default": "Decoy_",
                    "description": "String to be used as prefix for the generated decoy sequences"
                },
                "decoy_method": {
                    "type": "string",
                    "default": "decoypyrat",
                    "description": "Method used to generate the decoy database",
                    "enum": ["protein-reverse", "protein-shuffle", "decoypyrat"]
                },
                "decoy_enzyme": {
                    "type": "string",
                    "default": "Trypsin",
                    "description": "Enzyme used to generate the decoy"
                },
                "protein_decoy_config": {
                    "type": "string",
                    "description": "Configuration file to perform the decoy generation"
                }
            }
        },
        "clean_and_process_database": {
            "title": "Clean and process database",
            "type": "object",
            "description": "Clean and process the resulted database",
            "default": "",
            "properties": {
                "clean_database": {
                    "type": "boolean",
                    "description": "Clean the database for stop codons, short protein sequences"
                },
                "minimum_aa": {
                    "type": "integer",
                    "default": 6,
                    "description": "Minimum number of AminoAcids for a protein to be included in the database"
                },
                "add_stop_codons": {
                    "type": "boolean",
                    "description": "If an stop codons is found, create two proteins from it"
                }
            }
        },
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "schema": "assets/schema_input.json",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/pgdb/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
                },
                "final_database_protein": {
                    "type": "string",
                    "default": "final_proteinDB.fa",
                    "description": "Filename for the final protein database"
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "hostnames": {
                    "type": "string",
                    "description": "Institutional configs hostname.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "enable_conda": {
                    "type": "boolean",
                    "description": "Run this workflow with Conda. You can also use '-profile conda' instead of providing this parameter.",
                    "hidden": true,
                    "fa_icon": "fas fa-bacon"
                },
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "tracedir": {
                    "type": "string",
                    "description": "Directory to keep pipeline Nextflow logs and reports.",
                    "default": "${params.outdir}/pipeline_info",
                    "fa_icon": "fas fa-cogs",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "show_hidden_params": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/ensembl_canonical_proteomes"
        },
        {
            "$ref": "#/definitions/non_canonical_proteome_parameters"
        },
        {
            "$ref": "#/definitions/custom_vcf_based_variant_proteomes"
        },
        {
            "$ref": "#/definitions/cbioportal_variant_proteomes"
        },
        {
            "$ref": "#/definitions/cosmic_variant_proteomes"
        },
        {
            "$ref": "#/definitions/gnomad_variant_proteomes"
        },
        {
            "$ref": "#/definitions/decoy_generation"
        },
        {
            "$ref": "#/definitions/clean_and_process_database"
        },
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ]
}
